apply plugin: 'site.macker.mackergradle.plugin'
apply plugin: 'java'
apply plugin: 'java-library-distribution'

sourceCompatibility = 1.7
version = '1.0.0'

// Task "distZip" added by plugin "java-library-distribution":
distZip.shouldRunAfter(build)


jar {
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF'
    manifest {
        attributes 'Main-Class': 'site.macker.mackerhelloworldexample.PrintHelloWorld',
                   'Implementation-Title': 'MackerHelloWorldExample',
                   'Implementation-Version': version,
                   'Class-Path': configurations.compile.collect { it.getName() }.join(' ')
                   //'Class-Path': configurations.runtime.files.collect { "lib/$it.name" }.join(' ')
    }
    // How-to add class path:
    //     http://stackoverflow.com/questions/22659463/add-classpath-in-manifest-using-gradle
    //     https://gist.github.com/simon04/6865179
}

//runMackerExample.dependsOn 'checkstyle'

task runMackerExample(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath

  main = 'site.macker.mackerhelloworldexample.PrintHelloWorld'

  // arguments to pass to the application
  //args 'appArg1'
}

mackerSettings {
  info = "Info from the client project which is using the MackerGradlePlugin."
}

buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath 'site.macker.mackergradle:MackerGradlePlugin:0.4.3'
    }
}

/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'andrej' at '11/19/16 4:21 PM' with Gradle 3.1
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.1/userguide/tutorial_java_projects.html
 */

/*
// Apply the java plugin to add support for Java
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}
*/
